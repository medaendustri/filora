// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String // Hashed password
  role          String    @default("user") // "admin" veya "user"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}

model Post { // Blog yazıları için
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique // SEO için benzersiz URL
  content       String // Markdown formatında içerik
  excerpt       String? // Kısa özet
  featuredImage String? // Manşet görseli URL'i
  published     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  // Kategori, etiket gibi alanlar eklenebilir
}

model PageContent { // "Hakkımızda", "Hizmetler", "Fiyatlar" gibi statik sayfalar için
  id            String    @id @default(uuid())
  slug          String    @unique // Sayfa tanımlayıcı (örn: "about", "services", "pricing")
  title         String
  content       String // Markdown formatında sayfa içeriği
  updatedAt     DateTime  @updatedAt
}

// NextAuth.js için gerekli modeller
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
